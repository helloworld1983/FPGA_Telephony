<?xml version="1.0" encoding="UTF-8"?>
<RootFolder label="COREGEN" treetype="folder" language="COREGEN">
	<Folder label="VERILOG Component Instantiation" treetype="folder">
		<Template label="readyPackets" treetype="template">
 
 
// The following must be inserted into your Verilog file for this
// core to be instantiated. Change the instance name and port connections
// (in parentheses) to your own signal names.
 
readyPackets YourInstanceName (
    .clk(clk),
    .din(din), // Bus [7 : 0] 
    .rd_en(rd_en),
    .srst(srst),
    .wr_en(wr_en),
    .data_count(data_count), // Bus [10 : 0] 
    .dout(dout), // Bus [7 : 0] 
    .empty(empty),
    .full(full));

 
		</Template>
		<Template label="packetBuffer" treetype="template">
 
 
// The following must be inserted into your Verilog file for this
// core to be instantiated. Change the instance name and port connections
// (in parentheses) to your own signal names.
 
packetBuffer YourInstanceName (
    .clk(clk),
    .din(din), // Bus [7 : 0] 
    .rd_en(rd_en),
    .srst(srst),
    .wr_en(wr_en),
    .data_count(data_count), // Bus [10 : 0] 
    .dout(dout), // Bus [7 : 0] 
    .empty(empty),
    .full(full));

 
		</Template>
		<Template label="rcvPackets" treetype="template">
 
 
// The following must be inserted into your Verilog file for this
// core to be instantiated. Change the instance name and port connections
// (in parentheses) to your own signal names.
 
rcvPackets YourInstanceName (
    .clk(clk),
    .din(din), // Bus [7 : 0] 
    .rd_en(rd_en),
    .srst(srst),
    .wr_en(wr_en),
    .data_count(data_count), // Bus [10 : 0] 
    .dout(dout), // Bus [7 : 0] 
    .empty(empty),
    .full(full));

 
		</Template>
	</Folder>
	<Folder label="VHDL Component Instantiation" treetype="folder">
		<Template label="readyPackets" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component readyPackets
    port (
    clk: IN std_logic;
    din: IN std_logic_VECTOR(7 downto 0);
    rd_en: IN std_logic;
    srst: IN std_logic;
    wr_en: IN std_logic;
    data_count: OUT std_logic_VECTOR(10 downto 0);
    dout: OUT std_logic_VECTOR(7 downto 0);
    empty: OUT std_logic;
    full: OUT std_logic);
end component;


 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 
your_instance_name : readyPackets
        port map (
            clk =&gt; clk,
            din =&gt; din,
            rd_en =&gt; rd_en,
            srst =&gt; srst,
            wr_en =&gt; wr_en,
            data_count =&gt; data_count,
            dout =&gt; dout,
            empty =&gt; empty,
            full =&gt; full);
 
		</Template>
		<Template label="packetBuffer" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component packetBuffer
    port (
    clk: IN std_logic;
    din: IN std_logic_VECTOR(7 downto 0);
    rd_en: IN std_logic;
    srst: IN std_logic;
    wr_en: IN std_logic;
    data_count: OUT std_logic_VECTOR(10 downto 0);
    dout: OUT std_logic_VECTOR(7 downto 0);
    empty: OUT std_logic;
    full: OUT std_logic);
end component;


 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 
your_instance_name : packetBuffer
        port map (
            clk =&gt; clk,
            din =&gt; din,
            rd_en =&gt; rd_en,
            srst =&gt; srst,
            wr_en =&gt; wr_en,
            data_count =&gt; data_count,
            dout =&gt; dout,
            empty =&gt; empty,
            full =&gt; full);
 
		</Template>
		<Template label="rcvPackets" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component rcvPackets
    port (
    clk: IN std_logic;
    din: IN std_logic_VECTOR(7 downto 0);
    rd_en: IN std_logic;
    srst: IN std_logic;
    wr_en: IN std_logic;
    data_count: OUT std_logic_VECTOR(10 downto 0);
    dout: OUT std_logic_VECTOR(7 downto 0);
    empty: OUT std_logic;
    full: OUT std_logic);
end component;


 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 
your_instance_name : rcvPackets
        port map (
            clk =&gt; clk,
            din =&gt; din,
            rd_en =&gt; rd_en,
            srst =&gt; srst,
            wr_en =&gt; wr_en,
            data_count =&gt; data_count,
            dout =&gt; dout,
            empty =&gt; empty,
            full =&gt; full);
 
		</Template>
	</Folder>
</RootFolder>
